/* –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ */
import { useEffect, useState, useRef } from "react";
import { useParams } from "react-router-dom";
import ClipLoader from "react-spinners/ClipLoader";

import styles from './style/pagesStyle.module.css';


import Header from "../components/Header/Header"
import Footer from "../components/Footer/Footer"
import Feedback from "../components/Feedback/Feedback";
import { ButtonProduct } from "../components/buttons/button";
import Specifications from '../components/Specifications/Specifications';
import WhiteButton from "../components/buttons/WhiteButton/WhiteButton";
import Triarty from "../components/buttons/Triarty/Triarty";
import Breadcrumbs from "../components/Breadcrumbs/Breadcrumbs";
import CommentModal from "../components/Modal/CommentModal";

import { getProductById } from "../services/getProductApi";

export default function Product() {
   
   //–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ API
   const { id } = useParams(); // –ü–æ–ª—É—á–∞–µ–º id –∏–∑ —Ä–æ—É—Ç–æ–≤
   const [product, setProduct] = useState(null);
   const [error, setError] = useState(null);
   const [isCommentModalOpen, setIsCommentModalOpen] = useState(false);
   const [likeProduct, setLikeProduct] = useState(false);
   const [userStatus, setUserStatus] = useState(false);

   const handleLike = () => {
      setLikeProduct(true);
      setIsCommentModalOpen(false);
      console.log('handleLike - —Å—Ä–∞–±–æ—Ç–∞–ª');
   };

   const handleModal = () => {
      setIsCommentModalOpen(true);
      setLikeProduct(false);
   };

   const closeModal = () => {
      setIsCommentModalOpen(false);
   };

   useEffect(() => {
      if (localStorage.getItem('accessToken')) {
         setUserStatus(true);
      }
   }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π


   //–≤—Å—Ç–∞–≤–∫–∞ –∑–≤—ë–∑–¥
   const
      starFill = '/images/goods/star-fill.png',
      starTransparency = '/images/goods/star-transparency.png',
      renderStars = () => {
         // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
         const fullStars = product.grade; //–ü–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
         const stars = [];
         for (let i = 1; i <= 5; i++) {
            stars.push(
               <img
                  key={i}
                  src={i <= fullStars ? starFill : starTransparency}
                  alt="star"
                  className="w-5 h-5"
               />
            );
         }
         return stars;
      };

   //–í–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
   const specificationsData = [
      {
         title: "–≠–∫—Ä–∞–Ω",
         items: [
            { name: "–î–∏–∞–≥–æ–Ω–∞–ª—å —ç–∫—Ä–∞–Ω–∞", value: "16.2" },
            { name: "–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–∞–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞", value: "120 –ì—Ü" },
            { name: "–¢–∏–ø —ç–∫—Ä–∞–Ω–∞", value: "Liquid Retina XDR" },
            { name: "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ", value: "3456—Ö2234" },
            { name: "–ü–æ–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞", value: "–ì–ª—è–Ω—Ü–µ–≤–æ–µ" },
            { name: "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞", value: "FaceTime HD 1080p" },
         ],
      },
      {
         title: "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä",
         items: [
            { name: "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", value: "–î–≤–µ–Ω–∞–¥—Ü–∞—Ç–∏—è–¥–µ—Ä–Ω—ã–π Apple M3 Pro" },
            { name: "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", value: "macOS Sonoma" },
         ],
      },
      {
         title: "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å",
         items: [{ name: "–û–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏", value: "16 –ì–ë" }],
      },
      {
         title: "–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö",
         items: [
            { name: "–û–±—ä—ë–º SSD", value: "512 –ì–ë" },
            { name: "–¢–∏–ø –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è", value: "SSD" },
            { name: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ M.2", value: "–ë–µ–∑ —Å–ª–æ—Ç–∞ M.2" },
         ],
      },
      {
         title: "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞",
         items: [
            { name: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", value: "Apple" },
            { name: "–¢–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", value: "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è" },
         ],
      },
   ];

   //–°–∫—Ä–æ–ª
   let
      specificationsRef = useRef(false),
      feedbackRef = useRef(false);
   const scrollToSection = (ref) => ref.current?.scrollIntoView({ behavior: "smooth", block: "start" });

   return (
      <div className="flex flex-col min-h-screen">
         <Header />
         <main className="flex-grow">
            <div className="pl-10 pt-10">
               {product ? (<Breadcrumbs parentCategory={"–∫–∞–∫–∞—è-—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"} productId={id} subCategory={product.category.name} productName={product.title.ru} />) : (<div className="h-full mb-6"><ClipLoader color="#FFA500" size={20} /></div>)}
               {
                  product ? (
                     <div className="grid grid-cols-2 items-stretch mb-32">
                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ */}
                        <section>
                           <h1 className={styles.productName}>{product.title.ru}</h1>
                        </section>

                        {/* –ö–Ω–æ–ø–∫–∏: –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                        <div>
                           <Triarty
                              specificationsRef={specificationsRef}
                              feedbackRef={feedbackRef}
                              totalReviews={product.comments.length}
                              scrollToSection={scrollToSection}
                           />
                        </div>

                        {/* Product images */}
                        <section className="bg-orange-100 p-6 mt-10"><img className="w-[550px] h-[370px]" src={product.pictureUrl} alt="images" /></section>

                        {/* Product info */}
                        <section className="bg-orange-100 p-6 mt-10 flex flex-col gap-14">
                           <div className={styles.ProductFullTitle}>{product.title.ru}</div>
                           <section className="flex items-center">
                              <section className="flex gap-4 mr-6">{renderStars()}</section>
                              <div className={styles.ProductAvailability}>  –í –Ω–∞–ª–∏—á–∏–∏</div>
                           </section>
                           <section className={styles.productInfo}>
                              <div className="mb-4">–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {product.seller}</div>
                              <div>–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞:  {product.productCode}</div>
                           </section>
                           <section className="flex gap-6 items-center relative">
                              <div className={styles.ProductPrice}>{product.price}</div>
                              <ButtonProduct name={'–ö—É–ø–∏—Ç—å'} />
                              {/* LikeProduct */}
                              <WhiteButton className='p-2' onClick={handleLike}>
                                 <img src="/images/main/variable/heart/heartMain.svg" alt="heart" />
                              </WhiteButton>
                           </section>
                        </section>
                     </div>
                  ) : (
                     // –ó–∞–≥—Ä—É–∑–∫–∞, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É—Å–ø–µ–ª–∏ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                     <div className="flex justify-center items-center h-full">
                        <ClipLoader color="#FFA500" size={60} />
                     </div>
                  )
               }
               {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
               <Specifications ref={specificationsRef} data={specificationsData} />
               <section className="mb-10 mt-10 flex items-center gap-10" ref={feedbackRef}>
                  <h1 className="text-4xl font-bold">–û—Ç–∑—ã–≤—ã</h1>
                  <button className="text-gray-500 hover:text-orange-300 active:text-orange-600 transition-colors" onClick={handleModal}>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</button>
               </section>

               {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
               {isCommentModalOpen && <CommentModal isOpen={isCommentModalOpen} onClose={closeModal} idProduct={id} />}

               {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ */}
               {product ? (
                  product.comments && product.comments.length > 0 ? (
                     // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–Ω–¥–µ—Ä–∏–º –∏—Ö
                     product.comments.map((comment, index) => (
                        <Feedback
                           key={index}
                           name={comment.author}
                           text={comment.content}
                           date={comment.createdAt}
                           grade={comment.grade}
                        />
                     ))
                  ) : (
                     <p className="my-10 text-center text-gray-500">
                        <span className="text-3xl text-orange-500">üì≠</span>
                        <span className="block mt-2 text-lg font-semibold text-gray-600">–ù–µ—Ç—É —Ç—É—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</span>
                        <span className="block text-sm text-orange-400 mt-1">–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!</span>
                     </p>
                  )
               ) : (
                  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                  <div className="flex justify-center items-center h-full mb-20">
                     <ClipLoader color="#FFA500" size={60} />
                  </div>
               )}
            </div>
         </main >
         <Footer />
      </div >
   )
}